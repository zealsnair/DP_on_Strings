#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    // Recursive Approach with Memoization
    bool rec(int i, int j, string &pattern, string &text, vector<vector<int>> &dp) {
        if (i < 0 && j < 0) return true;  // Both pattern and text exhausted
        if (i < 0) return false;  // Pattern exhausted but text is not
        if (j < 0) {
            for (int k = 0; k <= i; k++)
                if (pattern[k] != '*') return false;
            return true;
        }

        if (dp[i][j] != -1) return dp[i][j];

        if (pattern[i] == text[j] || pattern[i] == '?')
            return dp[i][j] = rec(i - 1, j - 1, pattern, text, dp);
        else if (pattern[i] == '*')
            return dp[i][j] = rec(i - 1, j, pattern, text, dp) || rec(i, j - 1, pattern, text, dp);
        else
            return dp[i][j] = false;
    }

    // Tabulation (Bottom-Up DP)
    bool tab(string &pattern, string &text) {
        int n = pattern.length(), m = text.length();
        vector<vector<bool>> dp(n + 1, vector<bool>(m + 1, false));

        dp[0][0] = true;  // Both pattern and text empty
        for (int j = 1; j <= m; j++) dp[0][j] = false;  // Empty pattern can't match non-empty text
        for (int i = 1; i <= n; i++) {  // Fill first column
            bool allStars = true;
            for (int k = 1; k <= i; k++)
                if (pattern[k - 1] != '*') {
                    allStars = false;
                    break;
                }
            dp[i][0] = allStars;
        }

        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                if (pattern[i - 1] == text[j - 1] || pattern[i - 1] == '?')
                    dp[i][j] = dp[i - 1][j - 1];
                else if (pattern[i - 1] == '*')
                    dp[i][j] = dp[i - 1][j] || dp[i][j - 1];
                else
                    dp[i][j] = false;
            }
        }

        return dp[n][m];
    }

    // Space Optimized Approach (Using Two Rows)
    bool so(string &pattern, string &text) {
        int n = pattern.length(), m = text.length();
        vector<bool> prev(m + 1, false), curr(m + 1, false);

        prev[0] = true;
        for (int j = 1; j <= m; j++) prev[j] = false;

        for (int i = 1; i <= n; i++) {
            bool allStars = true;
            for (int k = 1; k <= i; k++)
                if (pattern[k - 1] != '*') {
                    allStars = false;
                    break;
                }
            curr[0] = allStars;

            for (int j = 1; j <= m; j++) {
                if (pattern[i - 1] == text[j - 1] || pattern[i - 1] == '?')
                    curr[j] = prev[j - 1];
                else if (pattern[i - 1] == '*')
                    curr[j] = prev[j] || curr[j - 1];
                else
                    curr[j] = false;
            }
            prev = curr;
        }

        return prev[m];
    }

    void wildcardMatching(string pattern, string text) {
        int n = pattern.length(), m = text.length();

        // Recursive (Memoization)
        vector<vector<int>> dp(n, vector<int>(m, -1));
        bool recResult = rec(n - 1, m - 1, pattern, text, dp);
        cout << "Recursive (Memoization) Result: " << (recResult ? "Match" : "No Match") << endl;

        // Tabulation
        bool tabResult = tab(pattern, text);
        cout << "Tabulation Result: " << (tabResult ? "Match" : "No Match") << endl;

        // Space Optimized (Using Two Rows)
        bool soResult = so(pattern, text);
        cout << "Space Optimized Result: " << (soResult ? "Match" : "No Match") << endl;
    }
};

// Main Function for User Input
int main() {
    string pattern, text;

    cout << "Enter the pattern: ";
    cin >> pattern;
    cout << "Enter the text: ";
    cin >> text;

    Solution sol;
    sol.wildcardMatching(pattern, text);

    return 0;
}
