#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    // Recursive Approach with Memoization
    int rec(int i, int j, string &s, string &t, vector<vector<int>> &dp) {
        if (i < 0) return j + 1; // If s is exhausted, insert remaining chars of t
        if (j < 0) return i + 1; // If t is exhausted, remove remaining chars of s

        if (dp[i][j] != -1) return dp[i][j];

        if (s[i] == t[j]) 
            return dp[i][j] = rec(i - 1, j - 1, s, t, dp); // No operation needed
        else 
            return dp[i][j] = 1 + min({rec(i - 1, j, s, t, dp),   // Delete
                                       rec(i, j - 1, s, t, dp),   // Insert
                                       rec(i - 1, j - 1, s, t, dp)}); // Replace
    }

    // Tabulation (Bottom-Up DP)
    int tab(string &s, string &t) {
        int n = s.length(), m = t.length();
        vector<vector<int>> dp(n + 1, vector<int>(m + 1, 0));

        for (int i = 0; i <= n; i++) dp[i][0] = i; // Deletion Cost
        for (int j = 0; j <= m; j++) dp[0][j] = j; // Insertion Cost

        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                if (s[i - 1] == t[j - 1]) 
                    dp[i][j] = dp[i - 1][j - 1]; // No operation needed
                else 
                    dp[i][j] = 1 + min({dp[i - 1][j],   // Delete
                                        dp[i][j - 1],   // Insert
                                        dp[i - 1][j - 1]}); // Replace
            }
        }

        return dp[n][m];
    }

    // Space Optimized Approach (Using Two Rows)
    int so(string &s, string &t) {
        int n = s.length(), m = t.length();
        vector<int> prev(m + 1, 0), curr(m + 1, 0);

        for (int j = 0; j <= m; j++) prev[j] = j; // Base case for insertion

        for (int i = 1; i <= n; i++) {
            curr[0] = i; // Base case for deletion
            for (int j = 1; j <= m; j++) {
                if (s[i - 1] == t[j - 1]) 
                    curr[j] = prev[j - 1];
                else 
                    curr[j] = 1 + min({prev[j], curr[j - 1], prev[j - 1]});
            }
            prev = curr;
        }

        return prev[m];
    }

    void minDistance(string word1, string word2) {
        int n = word1.length(), m = word2.length();

        // Recursive (Memoization)
        vector<vector<int>> dp(n, vector<int>(m, -1));
        int recResult = rec(n - 1, m - 1, word1, word2, dp);
        cout << "Recursive (Memoization) Result: " << recResult << endl;

        // Tabulation
        int tabResult = tab(word1, word2);
        cout << "Tabulation Result: " << tabResult << endl;

        // Space Optimized (Using Two Rows)
        int soResult = so(word1, word2);
        cout << "Space Optimized Result: " << soResult << endl;
    }
};

// Main Function for User Input
int main() {
    string str1, str2;

    cout << "Enter the first string: ";
    cin >> str1;
    cout << "Enter the second string: ";
    cin >> str2;

    Solution sol;
    sol.minDistance(str1, str2);

    return 0;
}
