#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    // Recursive Approach with Memoization
    int rec(int i, int j, string &s, string &t, vector<vector<int>> &dp) {
        if (i < 0 || j < 0) return 0;

        if (dp[i][j] != -1) return dp[i][j];

        if (s[i] == t[j])
            return dp[i][j] = 1 + rec(i - 1, j - 1, s, t, dp);
        
        return dp[i][j] = max(rec(i - 1, j, s, t, dp), rec(i, j - 1, s, t, dp));
    }

    // Tabulation Approach (Bottom-Up DP)
    int tab(string &s, string &t) {
        int n = s.length(), m = t.length();
        vector<vector<int>> dp(n + 1, vector<int>(m + 1, 0));

        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                if (s[i - 1] == t[j - 1])
                    dp[i][j] = 1 + dp[i - 1][j - 1];
                else
                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
            }
        }

        return dp[n][m];
    }

    // Space Optimized Approach (Using Two Arrays)
    int so(string &s, string &t) {
        int n = s.length(), m = t.length();
        vector<int> prev(m + 1, 0), curr(m + 1, 0);

        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                if (s[i - 1] == t[j - 1])
                    curr[j] = 1 + prev[j - 1];
                else
                    curr[j] = max(prev[j], curr[j - 1]);
            }
            prev = curr;
        }

        return prev[m];
    }

    // Function to compute minimum insertions and deletions
    void canYouMake(string s, string t) {
        int n = s.length(), m = t.length();

        // Recursive (Memoization)
        vector<vector<int>> dp(n, vector<int>(m, -1));
        int recLCS = rec(n - 1, m - 1, s, t, dp);
        cout << "Recursive (Memoization) Min Operations: " << (n + m - 2 * recLCS) << endl;

        // Tabulation Approach
        int tabLCS = tab(s, t);
        cout << "Tabulation Min Operations: " << (n + m - 2 * tabLCS) << endl;

        // Space Optimized Approach
        int soLCS = so(s, t);
        cout << "Space Optimized Min Operations: " << (n + m - 2 * soLCS) << endl;
    }
};

// Main Function for User Input
int main() {
    string str, ptr;

    cout << "Enter first string: ";
    cin >> str;
    cout << "Enter second string: ";
    cin >> ptr;

    Solution sol;
    sol.canYouMake(str, ptr);

    return 0;
}
